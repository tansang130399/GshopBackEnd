const express = require("express");
const router = express.Router();
const Cart = require("../models/cartModel");
const Product = require("../models/productModel");
const cartModel = require("../models/cartModel");

//* /cart

//* Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
router.post("/add", async (req, res) => {
  try {
    const { id_user, id_product, quantity } = req.body;

    // Ki·ªÉm tra s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i kh√¥ng
    const product = await Product.findById(id_product);
    if (!product) {
      return res.json({ status: false, message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i" });
    }

    // Ki·ªÉm tra s·ªë l∆∞·ª£ng t·ªìn kho
    if (quantity > product.quantity) {
      return res.json({
        status: false,
        message: `Ch·ªâ c√≤n ${product.quantity} s·∫£n ph·∫©m trong kho`,
      });
    }

    let cart = await Cart.findOne({ id_user });

    if (!cart) {
      cart = new Cart({ id_user, items: [] });
    }

    const existingItem = cart.items.find((item) => item.id_product.equals(id_product));

    if (existingItem) {
      // Ki·ªÉm tra t·ªïng s·ªë l∆∞·ª£ng c√≥ v∆∞·ª£t kho kh√¥ng
      if (existingItem.quantity + quantity > product.quantity) {
        return res.json({
          status: false,
          message: `B·∫°n ch·ªâ c√≥ th·ªÉ th√™m t·ªëi ƒëa ${
            product.quantity - existingItem.quantity
          } s·∫£n ph·∫©m n·ªØa`,
        });
      }
      existingItem.quantity += quantity;
    } else {
      cart.items.push({ id_product, quantity, price: product.price });
    }

    await cart.save();
    res.json({ status: true, data: cart });
  } catch (error) {
    res.json({ status: false, error: error.message });
  }
});

//*  C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
router.put("/update", async (req, res) => {
  try {
    const { id_user, id_product, quantity } = req.body;

    // Ki·ªÉm tra s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i kh√¥ng
    const product = await Product.findById(id_product);
    if (!product) {
      return res.json({ status: false, message: "S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i" });
    }

    // Ki·ªÉm tra s·ªë l∆∞·ª£ng t·ªìn kho
    if (quantity > product.quantity) {
      return res.json({
        status: false,
        message: `Ch·ªâ c√≤n ${product.quantity} s·∫£n ph·∫©m trong kho`,
      });
    }

    let cart = await Cart.findOne({ id_user });
    if (!cart) {
      return res.json({ status: false, message: "Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i" });
    }

    const item = cart.items.find((item) => item.id_product.equals(id_product));
    if (!item) {
      return res.json({ status: false, message: "S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè h√†ng" });
    }

    item.quantity = quantity;
    await cart.save();
    res.json({ status: true, data: cart });
  } catch (error) {
    res.json({ status: false, error: error.message });
  }
});

//* X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
router.delete("/remove", async (req, res) => {
  try {
    const { id_user, id_product } = req.body;

    let cart = await Cart.findOne({ id_user });
    if (!cart) {
      return res.json({ status: false, message: "Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i" });
    }

    cart.items = cart.items.filter((item) => !item.id_product.equals(id_product));

    await cart.save();
    res.json({ status: true, data: cart });
  } catch (error) {
    res.json({ status: false, error: error.message });
  }
});

// X√≥a gi·ªè h√†ng theo ID
router.delete("/delete/:id_cart", async (req, res) => {
  try {
    const { id_cart } = req.params;

    const deletedItem = await cartModel.findByIdAndDelete(id_cart);

    if (!deletedItem) {
      return res.json({ status: false, message: "Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ƒë·ªÉ x√≥a" });
    }

    res.json({ status: true, data: deletedItem });
  } catch (error) {
    res.json({ status: false, message: error.message });
  }
});

//* L·∫•y gi·ªè h√†ng c·ªßa user
router.get("/:id_user", async (req, res) => {
  try {
    const { id_user } = req.params;

    const cart = await Cart.findOne({ id_user }).populate(
      "items.id_product",
      "name quantity price isActive"
    );
    if (!cart) {
      return res.json({ status: false, message: "Gi·ªè h√†ng tr·ªëng" });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i s·∫£n ph·∫©m v√† c·∫≠p nh·∫≠t v√†o gi·ªè h√†ng
    cart.items = await Promise.all(
      cart.items.map(async (item) => {
        const product = await Product.findById(item.id_product);

        if (!product.isActive) {
          return {
            ...item._doc,
            status: "Ng·ª´ng kinh doanh",
            selected: false,
          };
        }

        if (product.quantity === 0) {
          return {
            ...item._doc,
            status: "H·∫øt h√†ng",
            selected: false,
          };
        }

        if (product.quantity < item.quantity) {
          return {
            ...item._doc,
            status: `Ch·ªâ c√≤n ${product.quantity} s·∫£n ph·∫©m trong kho`,
            quantity: product.quantity,
            selected: false,
          };
        }

        return {
          ...item._doc,
          status: "C√≤n h√†ng",
          selected: false,
        };
      })
    );
    cart.save();
    res.json({ status: true, data: cart });
  } catch (error) {
    res.json({ status: false, message: error.message });
  }
});

// * C·∫≠p nh·∫≠t thu·ªôc t√≠nh selected c·ªßa s·∫£n ph·∫©m
router.put("/update-selected", async (req, res) => {
  try {
    const { id_user, id_product, selected } = req.body;

    if (typeof selected !== "boolean") {
      return res.json({
        status: false,
        message: "Gi√° tr·ªã selected ph·∫£i l√† true ho·∫∑c false",
      });
    }

    // T√¨m gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng
    const cart = await Cart.findOne({ id_user });

    if (!cart) {
      return res.json({ status: false, message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng" });
    }

    if (id_product) {
      // üîπ C·∫≠p nh·∫≠t tr·∫°ng th√°i selected cho m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ
      const item = cart.items.find((item) => item.id_product.toString() === id_product);
      if (!item) {
        return res.json({ status: false, message: "S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè h√†ng" });
      }
      item.selected = selected;
    } else {
      // üî• C·∫≠p nh·∫≠t tr·∫°ng th√°i selected cho t·∫•t c·∫£ s·∫£n ph·∫©m
      cart.items.forEach((item) => {
        item.selected = selected;
      });
    }

    await cart.save();

    res.json({ status: true, message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng", cart });
  } catch (error) {
    console.error(error);
    res.json({ status: false, message: error.message });
  }
});
module.exports = router;
